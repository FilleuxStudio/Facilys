@page "/managerClients"
@rendermode InteractiveServer
@inject PageTitleService PageTitleService
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h4 class="card-title">Liste des clients</h4>
                    </div><!--end col-->
                    <div class="col-auto">
                        <button type="button" @onclick="@(() => OpenModal("OpenModalLargeAddClient"))" class="btn bg-primary-subtle text-primary"><i class="fas fa-plus me-1"></i> Ajotuer un client</button>
                    </div><!--end col-->
                </div><!--end row-->
            </div><!--end card-header-->
            <div class="card-body pt-0">
                <div class="table-responsive">
                    <table class="table mb-0" id="datatable_1">
                        <thead class="table-light">
                            <tr>
                                <th>Nom</th>
                                <th>Prénom</th>
                                <th>Véhicules</th>
                                <th>Téléphone</th>
                                <th>Statut</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var client in managerClienViewtLists)
                            {
                                <tr>
                                    <td class="d-flex align-items-center">
                                        <div class="d-flex align-items-center">
                                            <div class="flex-grow-1 text-truncate">
                                                <h6 class="m-0">@client.Client.Lname</h6>
                                                <a href="#!" @onclick="@(() => OpenGoogleMaps(client.Client.Address + " " + client.Client.PostalCode + " " + client.Client.City))" class="fs-12 text-primary">@client.Client.Address @client.Client.PostalCode @client.Client.City</a>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@client.Client.Fname</td>
                                    <td><a href="#" class="text-body text-decoration-underline">Véhicules <span class="badge rounded text-success bg-success-subtle">@client.Vehicles.Where(c => c.Client.Id == client.Client.Id).Count()</span></a></td>
                                    <td>@client.PhonesClients.Where(c => c.Client.Id == client.Client.Id).FirstOrDefault().Phone</td>
                                    <td><span class="badge rounded text-success bg-success-subtle">Active</span></td>
                                    <td class="text-end">
                                        <button type="button" @onclick="@(() => OpenModalData("OpenModalLargeEditClient", client.Client.Id))" class="btn btn-sm bg-secondary-subtle text-secondary"><i class="las la-pen text-secondary fs-18"></i></button>
                                        <a href="#"><i class="las la-trash-alt text-secondary fs-18"></i></a>
                                    </td>
                                </tr>
                            }

                            <tr>
                                <td class="d-flex align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="assets/images/users/avatar-2.jpg" class="me-2 thumb-md align-self-center rounded" alt="...">
                                        <div class="flex-grow-1 text-truncate">
                                            <h6 class="m-0">Karen Savage</h6>
                                            <a href="#" class="fs-12 text-primary">extradummy@gmail.com</a>
                                        </div><!--end media body-->
                                    </div>
                                </td>
                                <td>#9514</td>
                                <td><a href="#" class="text-body text-decoration-underline">Admin</a></td>
                                <td>Today, 02:30pm</td>
                                <td><span class="badge rounded text-success bg-success-subtle">Active</span></td>
                                <td class="text-end">
                                    <a href="#"><i class="las la-pen text-secondary fs-18"></i></a>
                                    <a href="#"><i class="las la-trash-alt text-secondary fs-18"></i></a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div> <!-- end col -->
</div> <!-- end row -->

<div class="@modalManager.GetModal("OpenModalLargeAddClient")?.ModalClass" id="OpenModalLargeAddClient" tabindex="-1" role="dialog" aria-labelledby="OpenModalLargeAddClientLabel" style="@modalManager.GetModal("OpenModalLargeAddClient")?.ModalDisplay" aria-hidden="@modalManager.GetModal("OpenModalLargeAddClient")?.AriaHidden">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="OpenModalLargeAddClientLabel">Ajouter un clients</h6>
                <button type="button" class="btn-close" @onclick="@(() => CloseModal("OpenModalLargeAddClient"))"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <EditForm class="" Model="@managerClientViewModel.Client" OnValidSubmit="SubmitAddClient" FormName="addClientForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="Lname" class="form-label">Nom <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Lname" @bind-Value="managerClientViewModel.Client.Lname"  required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label" for="Fname">Prénom <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Fanme" @bind-Value="managerClientViewModel.Client.Fname" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="Address" class="form-label">Adresse <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Address" @bind-Value="managerClientViewModel.Client.Address" required />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="city">Ville <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="useremail" @bind-Value="managerClientViewModel.Client.City" required />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="PostalCode">Code Postal <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="PostalCode" @bind-Value="managerClientViewModel.Client.PostalCode" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label" for="Type">Type de client <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" id="Type" @bind-Value="managerClientViewModel.Client.Type" >
                                    <option value="">Sélectionnez un type</option>
                                    <option value="@TypeClient.Client">Client</option>
                                    <option value="@TypeClient.ClientProfessional">Client professionnel</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="Phone" class="form-label">Téléphone <span class="text-danger">*</span></label>
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" id="Phone" @bind-value="currentPhone" @onkeyup="HandleKeyUpPhone" aria-describedby="button-addon1" />
                                <button class="btn btn-outline-success" type="button" @onclick="AddPhone" id="button-addon1">+</button>
                            </div>
                            <div class="mb-3">
                                <label for="phoneList" class="form-label">Liste des numéros</label>
                                <select id="phoneList" class="form-select" size="3" multiple>
                                    @foreach (var phone in managerClientViewModel.PhonesClients)
                                    {
                                        <option>@phone.Phone</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label" for="email">Email <span class="text-warning">*</span></label>
                                <div class="input-group mb-3">
                                    <input type="email" class="form-control" id="email" @bind-value="currentEmail" @onkeyup="HandleKeyUpEmail" aria-describedby="button-addon2" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="AddEmail" id="button-addon2">+</button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="emailList" class="form-label">Liste des emails</label>
                                <select id="emailList" class="form-select" size="3" multiple>
                                    @foreach (var email in managerClientViewModel.EmailsClients)
                                    {
                                        <option>@email.Email</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label" for="AdditionalInformation">Informations complémentaires</label>
                                <InputTextArea class="form-control" rows="5" id="AdditionalInformation" @bind-Value="managerClientViewModel.Client.AdditionalInformation"></InputTextArea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 text-end">
                            <button type="submit" class="btn btn-primary px-4">Ajouter et passer au véhicule</button>
                            <button type="submit" class="btn btn-primary px-4">Ajouter</button>
                        </div>
                    </div>
                </EditForm>
            </div><!--end modal-body-->
        </div><!--end modal-content-->
    </div><!--end modal-dialog-->
</div><!--end modal-->


<div class="@modalManager.GetModal("OpenModalLargeEditClient")?.ModalClass" id="OpenModalLargeEditClient" tabindex="-1" role="dialog" aria-labelledby="OpenModalLargeEditClientLabel" style="@modalManager.GetModal("OpenModalLargeEditClient")?.ModalDisplay" aria-hidden="@modalManager.GetModal("OpenModalLargeEditClient")?.AriaHidden">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title m-0" id="OpenModalLargeEditClientLabel">Modifier un clients</h6>
                <button type="button" class="btn-close" @onclick="@(() => CloseModal("OpenModalLargeEditClient"))"></button>
            </div><!--end modal-header-->
            <div class="modal-body">
                <EditForm class="" Model="@managerClientViewModel.Client" OnValidSubmit="SubmitAddClient" FormName="addClientForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="Lname" class="form-label">Nom <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Lname" @bind-Value="managerClientViewModel.Client.Lname" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label" for="Fname">Prénom <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Fanme" @bind-Value="managerClientViewModel.Client.Fname" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="Address" class="form-label">Adresse <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="Address" @bind-Value="managerClientViewModel.Client.Address" required />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="city">Ville <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="useremail" @bind-Value="managerClientViewModel.Client.City" required />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label" for="PostalCode">Code Postal <span class="text-danger">*</span></label>
                                <InputText class="form-control" id="PostalCode" @bind-Value="managerClientViewModel.Client.PostalCode" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label" for="Type">Type de client <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" id="Type" @bind-Value="managerClientViewModel.Client.Type">
                                    <option value="">Sélectionnez un type</option>
                                    <option value="@TypeClient.Client">Client</option>
                                    <option value="@TypeClient.ClientProfessional">Client professionnel</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="Phone" class="form-label">Téléphone <span class="text-danger">*</span></label>
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" id="Phone" @bind-value="currentPhone" @onkeyup="HandleKeyUpPhone" aria-describedby="button-addon1" />
                                <button class="btn btn-outline-success" type="button" @onclick="AddPhone" id="button-addon1">+</button>
                            </div>
                            <div class="mb-3">
                                <label for="phoneList" class="form-label">Liste des numéros</label>
                                <select id="phoneList" class="form-select" size="3" multiple>
                                    @foreach (var phone in managerClientViewModel.PhonesClients)
                                    {
                                        <option>@phone.Phone</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label" for="email">Email <span class="text-warning">*</span></label>
                                <div class="input-group mb-3">
                                    <input type="email" class="form-control" id="email" @bind-value="currentEmail" @onkeyup="HandleKeyUpEmail" aria-describedby="button-addon2" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="AddEmail" id="button-addon2">+</button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="emailList" class="form-label">Liste des emails</label>
                                <select id="emailList" class="form-select" size="3" multiple>
                                    @foreach (var email in managerClientViewModel.EmailsClients)
                                    {
                                        <option>@email.Email</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label" for="AdditionalInformation">Informations complémentaires</label>
                                <InputTextArea class="form-control" rows="5" id="AdditionalInformation" @bind-Value="managerClientViewModel.Client.AdditionalInformation"></InputTextArea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 text-end">
                            <button type="submit" class="btn btn-warning px-4">Modifier</button>
                        </div>
                    </div>
                </EditForm>
            </div><!--end modal-body-->
        </div><!--end modal-content-->
    </div><!--end modal-dialog-->
</div><!--end modal-->

@if (modalManager.IsBackdropVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    List<ManagerClienViewtList> managerClienViewtLists = new();
    ManagerClientViewModel managerClientViewModel = new();
    ModalManagerId modalManager = new();

    private string currentPhone = "", currentEmail= "";

    private async Task OpenGoogleMaps(string clientIndex)
    {
        Console.WriteLine($"Ouvrir Google Maps pour le client {clientIndex}...");
        await ElectronNET.API.Electron.Shell.OpenExternalAsync("https://www.google.com/maps");
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(() =>
        {
            PageTitleService.CurrentTitle = "Gestion clients";
        });

        await LoadDataHeader();

        managerClientViewModel.Client = new();
        managerClientViewModel.PhonesClients = new();
        managerClientViewModel.EmailsClients = new();


        modalManager.RegisterModal("OpenModalLargeAddClient");
        modalManager.RegisterModal("OpenModalLargeEditClient");
    }

    private async Task LoadDataHeader()
    {
        managerClientViewModel.EmailsClients = await DbContext.Emails.Include(c => c.Client).ToListAsync();
        managerClientViewModel.PhonesClients = await DbContext.Phones.Include(c => c.Client).ToListAsync();
        managerClientViewModel.Vehicles = await DbContext.Vehicles.Include(c => c.Client).ToListAsync();
        var clients = await DbContext.Clients.ToListAsync();

        foreach(var client in clients){
            managerClienViewtLists.Add(new()
            {
                    Client = client,
                    EmailsClients = managerClientViewModel.EmailsClients.Where(c => c.Client.Id == client.Id).ToList(),
                    PhonesClients = managerClientViewModel.PhonesClients.Where(c => c.Client.Id == client.Id).ToList(),
                    Vehicles = managerClientViewModel.Vehicles.Where(c => c.Client.Id == client.Id).ToList(),
            });
        }  

    }

    private async void OpenModal(string id)
    {
        await JSRuntime.InvokeVoidAsync("modifyBodyForModal", true);
        modalManager.OpenModal(id);
        StateHasChanged();
    }

    private async void OpenModalData(string id, Guid idUser)
    {
        await JSRuntime.InvokeVoidAsync("modifyBodyForModal", true);
        modalManager.OpenModal(id);
        managerClientViewModel.Client = await DbContext.Clients.Where(i => i.Id == idUser).FirstOrDefaultAsync();
        managerClientViewModel.EmailsClients = await DbContext.Emails.Include(c => c.Client).Where(u => u.Client.Id == idUser).ToListAsync();
        managerClientViewModel.PhonesClients = await DbContext.Phones.Include(c => c.Client).Where(u => u.Client.Id == idUser).ToListAsync();
        StateHasChanged();
    }

    private async void CloseModal(string id)
    {
        await JSRuntime.InvokeVoidAsync("modifyBodyForModal", false);
        modalManager.CloseModal(id);
        StateHasChanged();
    }

    private void HandleKeyUpPhone(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == ";")
        {
            AddPhone();
        }
    }

    private void HandleKeyUpEmail(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" || e.Key == ";")
        {
            AddEmail();
        }
    }

    private void AddPhone()
    {
        if (!string.IsNullOrWhiteSpace(currentPhone))
        {
            managerClientViewModel.PhonesClients.Add(new()
            {
                Id = Guid.NewGuid(),
                    Phone = currentPhone.Trim(),
            });
            currentPhone = "";
        }
    }

    private void AddEmail()
    {
        if (!string.IsNullOrWhiteSpace(currentEmail))
        {
            managerClientViewModel.EmailsClients.Add(new()
                {
                    Id = Guid.NewGuid(),
                    Email = currentEmail.Trim(),
                });
            currentEmail = "";
        }
    }

    private async Task SubmitAddClient()
    {
        managerClientViewModel.Client.Id = Guid.NewGuid();
        managerClientViewModel.Client.DateCreated = DateTime.Now;
        await DbContext.Clients.AddAsync(managerClientViewModel.Client);
        await DbContext.SaveChangesAsync();

        if(managerClientViewModel.PhonesClients.Count != 0){
            for(int i = 0; i < managerClientViewModel.PhonesClients.Count; i++){
                managerClientViewModel.PhonesClients[i].Client = managerClientViewModel.Client;
            }

            await DbContext.Phones.AddRangeAsync(managerClientViewModel.PhonesClients);
        }

        if (managerClientViewModel.EmailsClients.Count != 0)
        {
            for (int i = 0; i < managerClientViewModel.EmailsClients.Count; i++)
            {
                managerClientViewModel.EmailsClients[i].Client = managerClientViewModel.Client;
            }
            await DbContext.Emails.AddRangeAsync(managerClientViewModel.EmailsClients);
        }

        await DbContext.SaveChangesAsync();
        ResetForm();

       CloseModal("OpenModalLargeAddClient");

        await  RefreshClientList();
    }

    private async Task SubmitEditdClient()
    {
    }

    private void ResetForm()
    {
        managerClientViewModel.Client = new(); // Réinitialisez avec un nouvel objet Client
        managerClientViewModel.PhonesClients.Clear();
        managerClientViewModel.PhonesClients = new();
        managerClientViewModel.EmailsClients.Clear();
        managerClientViewModel.EmailsClients = new();
        currentPhone = string.Empty;
        currentEmail = string.Empty;
    }

    private async Task RefreshClientList()
    {
        // Récupérer la liste mise à jour des clients depuis votre service
        managerClienViewtLists.Clear();
        await LoadDataHeader();
        await InvokeAsync(StateHasChanged);
       // await InvokeAsync(StateHasChanged);
       // StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScript", "/assets/libs/simple-datatables/umd/simple-datatables.js");
            //await JSRuntime.InvokeVoidAsync("loadScript", "/assets/js/pages/datatable.init.js");
        }
    }
}