@page "/dashboard"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject PageTitleService PageTitleService
@attribute [StreamRendering]
@inject UserConnectionService UserConnection
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IMemoryCache _cache
@inject ILogger<Dashboard> Logger

<PageTitle>Dashboard</PageTitle>

@if (settingEmpty == false)
{
    <!--Alerte-->
    <div class="alert alert-danger shadow-sm border-theme-white-2" role="alert">
        <div class="d-inline-flex justify-content-center align-items-center thumb-xs bg-danger rounded-circle mx-auto me-1">
            <i class="fas fa-xmark align-self-center mb-0 text-white "></i>
        </div>
        <strong>Oh !</strong> Les paramètres de l'entreprise n'ont pas été renseignés. Veuillez les compléter.
    </div>
}

<!--header-->
<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-body">
                <div class="row d-flex justify-content-center border-dashed-bottom pb-3">
                    <div class="col-9">
                        <p class="text-dark mb-0 fw-semibold fs-14">Clients total</p>
                        <h3 class="mt-2 mb-0 fw-bold">@dashboardData.ClientCount</h3>
                    </div>
                    <div class="col-3 align-self-center">
                        <div class="d-flex justify-content-center align-items-center thumb-xl bg-light rounded-circle mx-auto">
                            <i class="iconoir-hexagon-dice h1 align-self-center mb-0 text-secondary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-body">
                <div class="row d-flex justify-content-center border-dashed-bottom pb-3">
                    <div class="col-9">
                        <p class="text-dark mb-0 fw-semibold fs-14">Factures total</p>
                        <h3 class="mt-2 mb-0 fw-bold">@dashboardData.InvoiceCount</h3>
                    </div>
                    <div class="col-3 align-self-center">
                        <div class="d-flex justify-content-center align-items-center thumb-xl bg-light rounded-circle mx-auto">
                            <i class="iconoir-clock h1 align-self-center mb-0 text-secondary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-body">
                <div class="row d-flex justify-content-center border-dashed-bottom pb-3">
                    <div class="col-9">
                        <p class="text-dark mb-0 fw-semibold fs-14">Véhicules total</p>
                        <h3 class="mt-2 mb-0 fw-bold">@dashboardData.VehicleCount</h3>
                    </div>
                    <div class="col-3 align-self-center">
                        <div class="d-flex justify-content-center align-items-center thumb-xl bg-light rounded-circle mx-auto">
                            <i class="iconoir-percentage-circle h1 align-self-center mb-0 text-secondary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Top-->
<div class="row">
    <div class="col-lg-6">
        <div class="card card-h-100">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h4 class="card-title">Top 10 des voitures</h4>
                    </div>
                </div>
            </div>
            <div class="card-body pt-0">
                <div class="table-responsive browser_users">
                    <table class="table mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-top-0">Marque</th>
                                <th class="border-top-0">Modèle</th>
                                <th class="border-top-0">Année</th>
                                <th class="border-top-0">Réparation</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var topVehicle in dashboardData.TopVehicles)
                            {
                                <tr>
                                    <td>@topVehicle.VehicleMark</td>
                                    <td>@topVehicle.VehicleModel</td>
                                    <td>@topVehicle.VehicleYear.Year</td>
                                    <td>@topVehicle.RepairCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="card card-h-100">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h4 class="card-title">Top 10 des clients</h4>
                    </div>
                </div>
            </div>
            <div class="card-body pt-0">
                <div class="table-responsive">
                    <table class="table mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-top-0">Nom</th>
                                <th class="border-top-0">Prénom</th>
                                <th class="border-top-0">Réparation</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var topClient in dashboardData.TopClients)
                            {
                                <tr>
                                    <td><a class="text-primary">@topClient.LastName</a></td>
                                    <td>@topClient.FirstName</td>
                                    <td>@topClient.RepairCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-12">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h4 class="card-title">
                            <p class="m-0 fs-12 fst-italic ps-2 text-muted">
                                Dernières données mises à jour - @dashboardData.LastUpdate.ToString("HH:mm:ss")
                                <button class="btn btn-link link-danger ms-1 p-0" @onclick="RefreshData">
                                    <i class="align-middle iconoir-refresh"></i>
                                </button>
                            </p>
                        </h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* @code {
    int client = 0;
    int vehicle = 0;
    int invoice = 0;

    bool settingEmpty = false;

    List<TopVehicle> TopVehicleData = new();
    List<TopClient> TopClientData = new();

    protected override async void OnInitialized()
    {
        //StateHasChanged();
        //PageTitleService.CurrentTitle = "Dashboard";

        await InvokeAsync(() =>
        {
            PageTitleService.CurrentTitle = "Dashboard";
        });

        await UserConnection.LoadCredentialsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           // await UserConnection.LoadCredentialsAsync();
            await LoadDataHeader();

            
            StateHasChanged(); // Demande un nouveau rendu du composant
            //await JSRuntime.InvokeVoidAsync("loadScript", "assets/js/scriptLoader.js");
        }
    }


    private async Task LoadDataHeader()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();

        settingEmpty = await context.CompanySettings.AnyAsync();

        client = await context.Clients.AsNoTracking().CountAsync();
        vehicle = await context.Vehicles.AsNoTracking().CountAsync();
        invoice = await context.Invoices.AsNoTracking().CountAsync();

        var dataTopVehicle = await context.HistoryParts
                    .Where(h => h.Vehicle != null)
                    .GroupBy(h => new { h.Vehicle.Id, h.Vehicle.Mark, h.Vehicle.Model, h.Vehicle.CirculationDate })
                    .Select(g => new TopVehicle
                        {
                            VehicleId = g.Key.Id.ToString(),
                            VehicleMark = g.Key.Mark,
                            VehicleModel = g.Key.Model,
                            VehicleYear = g.Key.CirculationDate,
                            RepairCount = g.Count()
                        })
                    .OrderByDescending(x => x.RepairCount)
                    .Take(10)
                    .AsNoTracking()
                    .ToListAsync();


        var dataTopClient = await context.HistoryParts
            .Where(h => h.Vehicle != null || h.OtherVehicle != null)
            .GroupBy(h => new
            {
                ClientId = h.Vehicle != null ? h.Vehicle.Client.Id : h.OtherVehicle.Client.Id,
                LastName = h.Vehicle != null ? h.Vehicle.Client.Lname : h.OtherVehicle.Client.Lname,
                FirstName = h.Vehicle != null ? h.Vehicle.Client.Fname : h.OtherVehicle.Client.Fname
            })
            .Select(g => new TopClient
                {
                    ClientId = g.Key.ClientId.ToString(),
                    LastName = g.Key.LastName,
                    FirstName = g.Key.FirstName,
                    RepairCount = g.Count()
                })
            .OrderByDescending(x => x.RepairCount)
            .Take(10)
            .AsNoTracking()
            .ToListAsync();


        foreach (var vehicleObject in dataTopVehicle)
        {
            TopVehicleData.Add(new TopVehicle()
                {
                    VehicleId = vehicleObject.VehicleId.ToString(),
                    VehicleMark = vehicleObject.VehicleMark,
                    VehicleModel = vehicleObject.VehicleModel,
                    VehicleYear = vehicleObject.VehicleYear,
                    RepairCount = vehicleObject.RepairCount,
                });
        }

        foreach (var clientObject in dataTopClient)
        {
            TopClientData.Add(new TopClient()
                {
                    ClientId = clientObject.ClientId.ToString(),
                    LastName = clientObject.LastName,
                    FirstName = clientObject.FirstName,
                    RepairCount = clientObject.RepairCount,
                });
        }

        await context.DisposeAsync();
    }

    public class TopVehicle
    {
        public string VehicleId { get; set; }
        public string VehicleMark { get; set; }
        public string VehicleModel { get; set; }
        public DateTime VehicleYear { get; set; }
        public int RepairCount { get; set; }
    }
    public class TopClient
    {
        public string ClientId { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public int RepairCount { get; set; }
    }
} *@

@code {
    private DashboardData dashboardData = new();
    private bool settingEmpty = true;
    private const string CACHE_KEY = "dashboard_data";
    private readonly TimeSpan CACHE_DURATION = TimeSpan.FromMinutes(5);

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.CurrentTitle = "Dashboard";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserConnection.LoadCredentialsAsync();
            await LoadDashboardData();
            StateHasChanged();
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Vérifier le cache d'abord
            if (_cache.TryGetValue(CACHE_KEY, out DashboardData cachedData))
            {
                dashboardData = cachedData;
                return;
            }

            // Charger les données depuis la DB
            await LoadDataFromDatabase();

            // Mettre en cache
           _cache.Set(CACHE_KEY, dashboardData, new MemoryCacheEntryOptions
{
    AbsoluteExpirationRelativeToNow = CACHE_DURATION,
    Size = 1 // Obligatoire puisque SizeLimit est défini
});
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors du chargement des données du dashboard");
        }
    }

    private async Task LoadDataFromDatabase()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();

        // Optimisation: Une seule requête pour les compteurs
        var counts = await context.Database.SqlQueryRaw<CountResult>(@"
            SELECT
                (SELECT COUNT(*) FROM Clients) as ClientCount,
                (SELECT COUNT(*) FROM Vehicles  ) as VehicleCount,
                (SELECT COUNT(*) FROM Invoices) as InvoiceCount
        ").FirstOrDefaultAsync();

        if (counts != null)
        {
            dashboardData.ClientCount = counts.ClientCount;
            dashboardData.VehicleCount = counts.VehicleCount;
            dashboardData.InvoiceCount = counts.InvoiceCount;
        }

        settingEmpty = await context.CompanySettings.AnyAsync();

        // Top véhicules avec requête optimisée
        dashboardData.TopVehicles = await context.HistoryParts
            .Where(h => h.Vehicle != null)
            .GroupBy(h => new { h.Vehicle.Id, h.Vehicle.Mark, h.Vehicle.Model, h.Vehicle.CirculationDate })
            .Select(g => new TopVehicle
            {
                VehicleId = g.Key.Id.ToString(),
                VehicleMark = g.Key.Mark,
                VehicleModel = g.Key.Model,
                VehicleYear = g.Key.CirculationDate,
                RepairCount = g.Count()
            })
            .OrderByDescending(x => x.RepairCount)
            .Take(10)
            .AsNoTracking()
            .ToListAsync();

        // Top clients avec requête optimisée
        dashboardData.TopClients = await context.HistoryParts
            .Where(h => h.Vehicle != null || h.OtherVehicle != null)
            .GroupBy(h => new
            {
                ClientId = h.Vehicle != null ? h.Vehicle.Client.Id : h.OtherVehicle.Client.Id,
                LastName = h.Vehicle != null ? h.Vehicle.Client.Lname : h.OtherVehicle.Client.Lname,
                FirstName = h.Vehicle != null ? h.Vehicle.Client.Fname : h.OtherVehicle.Client.Fname
            })
            .Select(g => new TopClient
            {
                ClientId = g.Key.ClientId.ToString(),
                LastName = g.Key.LastName,
                FirstName = g.Key.FirstName,
                RepairCount = g.Count()
            })
            .OrderByDescending(x => x.RepairCount)
            .Take(10)
            .AsNoTracking()
            .ToListAsync();

        dashboardData.LastUpdate = DateTime.Now;
    }

    private async Task RefreshData()
    {
        _cache.Remove(CACHE_KEY);
        await LoadDashboardData();
        StateHasChanged();
    }

    // Classes pour les données
    public class DashboardData
    {
        public int ClientCount { get; set; }
        public int VehicleCount { get; set; }
        public int InvoiceCount { get; set; }
        public List<TopVehicle> TopVehicles { get; set; } = new();
        public List<TopClient> TopClients { get; set; } = new();
        public DateTime LastUpdate { get; set; }
    }

    public class CountResult
    {
        public int ClientCount { get; set; }
        public int VehicleCount { get; set; }
        public int InvoiceCount { get; set; }
    }

    public class TopVehicle
    {
        public string VehicleId { get; set; }
        public string VehicleMark { get; set; }
        public string VehicleModel { get; set; }
        public DateTime VehicleYear { get; set; }
        public int RepairCount { get; set; }
    }

    public class TopClient
    {
        public string ClientId { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public int RepairCount { get; set; }
    }
}