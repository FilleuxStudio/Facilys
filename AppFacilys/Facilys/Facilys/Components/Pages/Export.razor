@page "/export"
@rendermode InteractiveServer
@inject PageTitleService PageTitleService
@inject IJSRuntime JSRuntime
@inject UserConnectionService UserConnection
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-3">
        <div class="card">
            <div class="card-body">
                <div class="dropdown float-end">
                    <a href="#" class="text-muted fs-16 dropdown-toggle p-1" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-solid fa-ellipsis-vertical"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end">
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportClients("csv"))">Export CSV</button>
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportClients("excel"))">Export Excel</button>
                    </div>
                </div>
                <img src="assets/images/products/2888740.png" class="me-2 align-self-center thumb-xl" alt="...">
                <h5 class="fw-semibold mt-3 fs-14">Clients</h5>
                <div class="d-flex justify-content-between my-2">
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">@clients </span> Entrées</p>
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">Export </span>Disponible</p>
                </div>
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <button class="btn btn-primary btn-sm w-100" @onclick="@(() => ExportClients("csv"))">
                            <i class="fa-solid fa-download me-1"></i>Export CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 col-lg-3">
        <div class="card">
            <div class="card-body">
                <div class="dropdown float-end">
                    <a href="#" class="text-muted fs-16 dropdown-toggle p-1" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-solid fa-ellipsis-vertical"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end">
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportVehicles("csv"))">Export CSV</button>
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportVehicles("excel"))">Export Excel</button>
                    </div>
                </div>
                <img src="assets/images/products/14703696.png" class="me-2 align-self-center thumb-xl" alt="...">
                <h5 class="fw-semibold mt-3 fs-14">Véhicules</h5>
                <div class="d-flex justify-content-between my-2">
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">@vehicle </span> Entrées</p>
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">Export </span>Disponible</p>
                </div>
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <button class="btn btn-success btn-sm w-100" @onclick="@(() => ExportVehicles("csv"))">
                            <i class="fa-solid fa-download me-1"></i>Export CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 col-lg-3">
        <div class="card">
            <div class="card-body">
                <div class="dropdown float-end">
                    <a href="#" class="text-muted fs-16 dropdown-toggle p-1 " data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-solid fa-ellipsis-vertical"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end">
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportInventorys("csv"))">Export CSV</button>
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportInventorys("excel"))">Export Excel</button>
                    </div>
                </div>
                <img src="assets/images/products/2992173.png" class="me-2 align-self-center thumb-xl" alt="...">
                <h5 class="fw-semibold mt-3 fs-14">Inventaire</h5>
                <div class="d-flex justify-content-between my-2">
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">@inventory </span> Entrées</p>
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">Export </span>Disponible</p>
                </div>
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <button class="btn btn-warning btn-sm w-100" @onclick="@(() => ExportInventorys("csv"))">
                            <i class="fa-solid fa-download me-1"></i>Export CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6 col-lg-3">
        <div class="card">
            <div class="card-body">
                <div class="dropdown float-end">
                    <a href="#" class="text-muted fs-16 dropdown-toggle p-1" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-solid fa-ellipsis-vertical"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end">
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportInvoices("csv"))">Export CSV</button>
                        <button class="dropdown-item" type="button" @onclick="@(() => ExportInvoices("excel"))">Export Excel</button>
                    </div>
                </div>
                <img src="assets/images/products/16920787.png" class="me-2 align-self-center thumb-xl" alt="...">
                <h5 class="fw-semibold mt-3 fs-14">Factures</h5>
                <div class="d-flex justify-content-between my-2">
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">@invoice </span> Entrées</p>
                    <p class="text-muted mb-0 fs-13 fw-semibold"><span class="text-dark">Export </span>Disponible</p>
                </div>
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <button class="btn btn-info btn-sm w-100" @onclick="@(() => ExportInvoices("csv"))">
                            <i class="fa-solid fa-download me-1"></i>Export CSV
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    int clients = 0, vehicle = 0, inventory = 0, invoice = 0;
    ApplicationDbContext context;
    protected override async Task OnInitializedAsync()
    {
        PageTitleService.CurrentTitle = "Exportation des données";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserConnection.LoadCredentialsAsync();
            context = await DbContextFactory.CreateDbContextAsync();

            clients = await context.Clients.CountAsync();
            vehicle = await context.Vehicles.CountAsync();
            inventory = await context.Inventorys.CountAsync();
            invoice = await context.Invoices.CountAsync();
            StateHasChanged();
        }
    }

    private async Task ExportClients(string format)
    {

        if (format == "csv")
        {
            var bytes = await ExportService.GenerateCsvAsync(context.Clients);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "clients.csv", streamRef);
        }
        else
        {
            var bytes = await ExportService.GenerateExcelAsync(context.Clients);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "clients.xlsx", streamRef);
        }
    }

    private async Task ExportVehicles(string format)
    {
        if (format == "csv")
        {
            var bytes = await ExportService.GenerateCsvAsync(context.Vehicles);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "vehicles.csv", streamRef);
        }
        else
        {
            var bytes = await ExportService.GenerateExcelAsync(context.Vehicles);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "vehicles.xlsx", streamRef);
        }
    }

    private async Task ExportInventorys(string format)
    {
        if (format == "csv")
        {
            var bytes = await ExportService.GenerateCsvAsync(context.Inventorys);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "inventory.csv", streamRef);
        }
        else
        {
            var bytes = await ExportService.GenerateExcelAsync(context.Inventorys);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "inventory.xlsx", streamRef);
        }
    }

    private async Task ExportInvoices(string format)
    {
        if (format == "csv")
        {
            var bytes = await ExportService.GenerateCsvAsync(context.Invoices);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "invoices.csv", streamRef);
        }
        else
        {
            var bytes = await ExportService.GenerateExcelAsync(context.Invoices);
            using var stream = new MemoryStream(bytes);
            var streamRef = new DotNetStreamReference(stream);

            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "invoices.xlsx", streamRef);
        }
    }
}