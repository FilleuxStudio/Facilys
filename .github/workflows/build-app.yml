name: Build and Deploy Electron.NET App

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        include:
          - os: windows-latest
            platform: win
            outputFolder: "win-unpacked"
            zipFile: "app-win.zip"
          - os: ubuntu-latest
            platform: linux
            outputFolder: "linux-unpacked"
            zipFile: "app-linux.zip"
          - os: macos-latest
            platform: osx
            outputFolder: "osx-unpacked"
            zipFile: "app-osx.zip"
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Navigate to project directory
      run: echo "Switched to project directory"
      working-directory: AppFacilys/Facilys/Facilys

    - name: Setup .NET SDK 8.x
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Setup .NET SDK 6.x
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'

    - name: Install Electron.NET CLI
      run: dotnet tool install ElectronNET.CLI --global

    - name: Restore dependencies
      run: dotnet restore
      working-directory: AppFacilys/Facilys/Facilys

    - name: Build Electron.NET App for ${{ matrix.platform }}
      run: |
        electronize build /target ${{ matrix.platform }}
      working-directory: AppFacilys/Facilys/Facilys

    - name: Archive build output
      working-directory: AppFacilys/Facilys/Facilys/bin/desktop
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] || [ "${{ matrix.os }}" = "macos-latest" ]; then
          zip -r ${{ matrix.zipFile }} ${{ matrix.outputFolder }}
        else
          powershell -Command "Compress-Archive -Path .\\${{ matrix.outputFolder }}\\* -DestinationPath .\\${{ matrix.zipFile }}"
      shell: bash

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.zipFile }}
        path: AppFacilys/Facilys/Facilys/bin/desktop/${{ matrix.zipFile }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Move artifacts to temp directory
      run: |
        mkdir -p temp_deploy
        cp artifacts/*.zip temp_deploy/

    - name: Check temp_deploy content
      run: ls -l temp_deploy/

    - name: Copy files to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.PORT }}
        source: "temp_deploy/*"
        target: "server/public/setup"
        strip_components: 1

