name: Deploy Blazor Server to Cloud Run

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: "myprojectfacilys"
  SERVICE_NAME: "blazor-server-app"
  REGION: "europe-west1" 
  ARTIFACT_REGISTRY: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/blazor-repo"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Éviter les jobs longs

    steps:
    # Étape 1 - Récupération du code
    - name: Checkout code
      uses: actions/checkout@v4

    # Étape 2 - Cache des dépendances .NET
    - name: Setup .NET Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Étape 3 - Installation .NET 8
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # Étape 4 - Build de l'application
    - name: Build Application
      run: |
        dotnet restore
        dotnet publish -c Release -o published --no-self-contained

    # Étape 5 - Construction de l'image Docker optimisée
    - name: Build Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    # Étape 6 - Authentification sécurisée avec Workload Identity
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: 'projects/403108519742/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'github-actions-deploy-2@myprojectfacilys.iam.gserviceaccount.com'

    # Étape 7 - Push de l'image vers Artifact Registry
    - name: Push Docker Image
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGION }}-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}  # Alternative si WIF non configuré
    - name: Upload Image
      run: docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    # Étape 8 - Déploiement sur Cloud Run avec paramètres économiques
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        image: ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        flags: |
          --platform=managed
          --cpu=1
          --memory=1Gi          # Minimum pour .NET
          --concurrency=80      # Optimise le nombre de requêtes/instance
          --timeout=300s        # Évite les instances bloquées
          --min-instances=0     # Scale-to-zero
          --max-instances=3     # Limite les coûts max
          --port=8080
          --no-traffic          # Déploiement sans coupure
          --revision-suffix=${{ github.sha }}

    # Étape 9 - Nettoyage des images obsolètes (optionnel)
    - name: Clean Old Images
      if: success()
      run: |
        gcloud artifacts docker images delete ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }} --delete-tags --quiet
        --filter="TAGS!=latest AND createTime<$(date -d '-7 days' +%Y-%m-%d)"